package com.expensemanager.controller;

import java.io.IOException;
import java.math.BigDecimal;
import java.time.LocalDateTime;
import java.util.List;
import java.util.UUID;

import com.expensemanager.model.Account;
import com.expensemanager.model.Category;
import com.expensemanager.model.Transaction;
import com.expensemanager.service.AccountService;
import com.expensemanager.service.CategoryService;
import com.expensemanager.service.SepayService;
import com.expensemanager.service.SepayService.SepayTransaction;
import com.expensemanager.service.TransactionService;

import jakarta.servlet.ServletException;
import jakarta.servlet.annotation.WebServlet;
import jakarta.servlet.http.HttpServlet;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import jakarta.servlet.http.HttpSession;

/**
 * Controller ƒë·ªÉ x·ª≠ l√Ω vi·ªác ƒë·ªìng b·ªô giao d·ªãch t·ª´ ng√¢n h√†ng.
 * Ng∆∞·ªùi d√πng s·∫Ω xem tr∆∞·ªõc c√°c giao d·ªãch v√† ch·ªçn ƒë·ªÉ nh·∫≠p v√†o h·ªá th·ªëng.
 */
@WebServlet(urlPatterns = {"/bank-sync", "/api/bank-sync", "/api/bank-sync/*"})
public class BankSyncController extends HttpServlet {

    private final SepayService sepayService = new SepayService();
    private final TransactionService transactionService = new TransactionService();
    private final AccountService accountService = new AccountService();
    private final CategoryService categoryService = new CategoryService();

    /**
     * X·ª≠ l√Ω y√™u c·∫ßu GET: Hi·ªÉn th·ªã trang ƒë·ªìng b·ªô ho·∫∑c x·ª≠ l√Ω sync action.
     * Trang n√†y s·∫Ω hi·ªÉn th·ªã c√°c giao d·ªãch ƒëang ch·ªù x·ª≠ l√Ω (n·∫øu c√≥).
     */
    @Override
    protected void doGet(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        
        String action = request.getParameter("action");
        
        // Handle sync action via GET (for AJAX calls)
        if ("sync".equals(action)) {
            handleSyncAction(request, response);
            return;
        }
        
        // Handle pending action - get transactions from session
        if ("pending".equals(action)) {
            handlePendingAction(request, response);
            return;
        }
        
        // Gi·∫£ s·ª≠ c√≥ session check
        // UUID userId = (UUID) session.getAttribute("user_id");

        // ‚úÖ T·∫£i d·ªØ li·ªáu c·∫ßn thi·∫øt cho form (dropdown t√†i kho·∫£n, danh m·ª•c)
        loadFormData(request);

        // ‚úÖ Chuy·ªÉn ti·∫øp ƒë·∫øn view ƒë·ªÉ hi·ªÉn th·ªã trang
        request.setAttribute("view", "/views/bank-sync.jsp");
        request.getRequestDispatcher("/layout/layout.jsp").forward(request, response);
    }

    /**
     * Handle pending action - return pending transactions from session
     */
    private void handlePendingAction(HttpServletRequest request, HttpServletResponse response)
            throws IOException {
        response.setContentType("application/json");
        response.setCharacterEncoding("UTF-8");
        
        try {
            HttpSession session = request.getSession(false);
            
            if (session == null) {
                response.getWriter().write("{\"transactions\":[]}");
                return;
            }
            
            @SuppressWarnings("unchecked")
            List<SepayTransaction> pendingTransactions = 
                (List<SepayTransaction>) session.getAttribute("pendingBankTransactions");
            
            if (pendingTransactions == null || pendingTransactions.isEmpty()) {
                response.getWriter().write("{\"transactions\":[]}");
                return;
            }
            
            // Build JSON manually (simple approach)
            StringBuilder json = new StringBuilder("{\"transactions\":[");
            for (int i = 0; i < pendingTransactions.size(); i++) {
                SepayTransaction tx = pendingTransactions.get(i);
                if (i > 0) json.append(",");
                json.append("{")
                    .append("\"id\":\"").append(escapeJson(tx.getId())).append("\",")
                    .append("\"amount\":").append(tx.getAmount()).append(",")
                    .append("\"content\":\"").append(escapeJson(tx.getContent())).append("\",")
                    .append("\"transactionDate\":\"").append(escapeJson(tx.getTransactionDate())).append("\",")
                    .append("\"accountNumber\":\"").append(escapeJson(tx.getAccountNumber())).append("\",")
                    .append("\"bankName\":\"").append(escapeJson(tx.getBankName())).append("\",")
                    .append("\"type\":\"").append(escapeJson(tx.getType())).append("\"")
                    .append("}");
            }
            json.append("]}");
            
            response.getWriter().write(json.toString());
            System.out.println("‚úÖ Returned " + pendingTransactions.size() + " pending transactions");
            
        } catch (Exception e) {
            System.err.println("‚ùå Error fetching pending transactions: " + e.getMessage());
            e.printStackTrace();
            response.setStatus(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);
            response.getWriter().write("{\"error\":\"" + escapeJson(e.getMessage()) + "\"}");
        }
    }
    
    /**
     * Escape special characters for JSON
     */
    private String escapeJson(String str) {
        if (str == null) return "";
        return str.replace("\\", "\\\\")
                  .replace("\"", "\\\"")
                  .replace("\n", "\\n")
                  .replace("\r", "\\r")
                  .replace("\t", "\\t");
    }

    /**
     * Handle sync action from AJAX GET request
     */
    private void handleSyncAction(HttpServletRequest request, HttpServletResponse response)
            throws IOException {
        response.setContentType("application/json");
        response.setCharacterEncoding("UTF-8");
        
        try {
            int days = 30;
            String daysParam = request.getParameter("days");
            if (daysParam != null) {
                days = Integer.parseInt(daysParam);
            }
            
            System.out.println("üè¶ Sync request: fetching " + days + " days of transactions");
            List<SepayTransaction> transactions = sepayService.fetchTransactions(days);
            
            // Save to session for later import
            HttpSession session = request.getSession();
            session.setAttribute("pendingBankTransactions", transactions);
            
            // Return JSON response
            String json = String.format(
                "{\"status\":\"success\",\"message\":\"ƒê√£ l·∫•y %d giao d·ªãch t·ª´ ng√¢n h√†ng\",\"count\":%d}",
                transactions.size(), transactions.size()
            );
            response.getWriter().write(json);
            System.out.println("‚úÖ Sync successful: " + transactions.size() + " transactions");
            
        } catch (Exception e) {
            System.err.println("‚ùå Sync failed: " + e.getMessage());
            e.printStackTrace();
            response.setStatus(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);
            String json = String.format(
                "{\"status\":\"error\",\"message\":\"L·ªói khi ƒë·ªìng b·ªô: %s\"}",
                e.getMessage().replace("\"", "'")
            );
            response.getWriter().write(json);
        }
    }

    /**
     * X·ª≠ l√Ω y√™u c·∫ßu POST: Th·ª±c hi·ªán h√†nh ƒë·ªông "L·∫•y giao d·ªãch" ho·∫∑c "Nh·∫≠p giao d·ªãch".
     */
    @Override
    protected void doPost(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        
        // Check if this is an API call to save single transaction
        String pathInfo = request.getPathInfo();
        if (pathInfo != null && pathInfo.equals("/save")) {
            handleSaveTransaction(request, response);
            return;
        }
        
        String action = request.getParameter("action");

        try {
            if ("fetch".equals(action)) {
                // 1Ô∏è‚É£ H√†nh ƒë·ªông: L·∫§Y GIAO D·ªäCH t·ª´ SePay API
                handleFetchTransactions(request, response);
            } else if ("import".equals(action)) {
                // 2Ô∏è‚É£ H√†nh ƒë·ªông: NH·∫¨P C√ÅC GIAO D·ªäCH ƒê√É CH·ªåN v√†o database
                handleImportTransactions(request, response);
            } else {
                // H√†nh ƒë·ªông kh√¥ng h·ª£p l·ªá
                request.setAttribute("error", "H√†nh ƒë·ªông kh√¥ng ƒë∆∞·ª£c h·ªó tr·ª£.");
                loadFormData(request);
                request.setAttribute("view", "/views/bank-sync.jsp");
                request.getRequestDispatcher("/layout/layout.jsp").forward(request, response);
            }
        } catch (Exception e) {
            System.err.println("L·ªói trong BankSyncController doPost: " + e.getMessage());
            request.setAttribute("error", "ƒê√£ x·∫£y ra l·ªói h·ªá th·ªëng. Vui l√≤ng th·ª≠ l·∫°i.");
            loadFormData(request);
            request.setAttribute("view", "/views/bank-sync.jsp");
            request.getRequestDispatcher("/layout/layout.jsp").forward(request, response);
        }
    }

    /**
     * X·ª≠ l√Ω logic l·∫•y giao d·ªãch t·ª´ SePay v√† l∆∞u v√†o session.
     */
    private void handleFetchTransactions(HttpServletRequest request, HttpServletResponse response)
            throws IOException, InterruptedException, ServletException {
        
        System.out.println("üè¶ B·∫Øt ƒë·∫ßu l·∫•y giao d·ªãch t·ª´ SePay...");
        List<SepayTransaction> transactions = sepayService.fetchTransactions(30); // L·∫•y 30 ng√†y

        // ‚úÖ L∆∞u c√°c giao d·ªãch v·ª´a l·∫•y ƒë∆∞·ª£c v√†o session ƒë·ªÉ ch·ªù ng∆∞·ªùi d√πng x√°c nh·∫≠n
        HttpSession session = request.getSession();
        session.setAttribute("pendingBankTransactions", transactions);
        
        System.out.println("‚úÖ L·∫•y th√†nh c√¥ng " + transactions.size() + " giao d·ªãch. Chuy·ªÉn h∆∞·ªõng v·ªÅ trang review.");
        response.sendRedirect(request.getContextPath() + "/bank-sync");
    }

    /**
     * X·ª≠ l√Ω logic nh·∫≠p c√°c giao d·ªãch ƒë√£ ch·ªçn v√†o c∆° s·ªü d·ªØ li·ªáu.
     */
    private void handleImportTransactions(HttpServletRequest request, HttpServletResponse response) 
            throws IOException, ServletException {
        
        HttpSession session = request.getSession();
        @SuppressWarnings("unchecked")
        List<SepayTransaction> pendingTransactions = 
            (List<SepayTransaction>) session.getAttribute("pendingBankTransactions");

        // L·∫•y danh s√°ch c√°c giao d·ªãch ƒë∆∞·ª£c ng∆∞·ªùi d√πng tick ch·ªçn t·ª´ form
        String[] selectedIndices = request.getParameterValues("selectedTransaction");

        if (selectedIndices == null || selectedIndices.length == 0) {
            request.setAttribute("error", "B·∫°n ch∆∞a ch·ªçn giao d·ªãch n√†o ƒë·ªÉ nh·∫≠p.");
            loadFormData(request); // T·∫£i l·∫°i d·ªØ li·ªáu cho form
            request.getRequestDispatcher("/views/bank-sync.jsp").forward(request, response);
            return;
        }

        System.out.println("üì• B·∫Øt ƒë·∫ßu nh·∫≠p " + selectedIndices.length + " giao d·ªãch ƒë√£ ch·ªçn...");
        int successCount = 0;
        
        // L·∫∑p qua c√°c giao d·ªãch ƒë∆∞·ª£c ch·ªçn ƒë·ªÉ x·ª≠ l√Ω
        for (String indexStr : selectedIndices) {
            int index = Integer.parseInt(indexStr);
            SepayTransaction sepayTx = pendingTransactions.get(index);

            // L·∫•y t√†i kho·∫£n v√† danh m·ª•c ng∆∞·ªùi d√πng ƒë√£ ch·ªçn cho giao d·ªãch n√†y
            String accountId = request.getParameter("accountId_" + index);
            String categoryId = request.getParameter("categoryId_" + index);
            String note = sepayTx.getContent(); // Fix: getContent() instead of getDescription()
            
            // Chuy·ªÉn ƒë·ªïi SepayTransaction th√†nh Transaction c·ªßa h·ªá th·ªëng
            Transaction transaction = new Transaction();
            transaction.setAmount(BigDecimal.valueOf(sepayTx.getAmount()));
            transaction.setNote(note);
            transaction.setTransactionDate(LocalDateTime.now()); // Fix: Use LocalDateTime.now()
            transaction.setType(sepayTx.getAmount() > 0 ? "income" : "expense");
            
            // Get Account and Category objects
            if (accountId != null && !accountId.isEmpty()) {
                Account account = accountService.getAccountById(UUID.fromString(accountId));
                transaction.setAccount(account);
            }
            if (categoryId != null && !categoryId.isEmpty()) {
                Category category = categoryService.getCategoryById(UUID.fromString(categoryId));
                transaction.setCategory(category);
            }
            
            // L∆∞u v√†o database
            transactionService.addTransaction(transaction);
            successCount++;
        }
        
        // ‚úÖ X√≥a c√°c giao d·ªãch ch·ªù kh·ªèi session sau khi ƒë√£ x·ª≠ l√Ω xong
        session.removeAttribute("pendingBankTransactions");

        System.out.println("‚úÖ Nh·∫≠p th√†nh c√¥ng " + successCount + " giao d·ªãch.");
        // Chuy·ªÉn h∆∞·ªõng v·ªÅ trang danh s√°ch giao d·ªãch ch√≠nh v·ªõi th√¥ng b√°o th√†nh c√¥ng
        response.sendRedirect(request.getContextPath() + "/transactions?import_success=" + successCount);
    }
    
    /**
     * Handle API POST /save - Save single transaction from bank sync
     */
    private void handleSaveTransaction(HttpServletRequest request, HttpServletResponse response)
            throws IOException {
        response.setContentType("application/json");
        response.setCharacterEncoding("UTF-8");
        
        try {
            // Read JSON from request body
            StringBuilder sb = new StringBuilder();
            String line;
            while ((line = request.getReader().readLine()) != null) {
                sb.append(line);
            }
            String jsonString = sb.toString();
            
            System.out.println("üì• Received save transaction request: " + jsonString);
            
            // Parse JSON using Gson
            com.google.gson.Gson gson = new com.google.gson.Gson();
            @SuppressWarnings("unchecked")
            java.util.Map<String, Object> jsonMap = gson.fromJson(jsonString, java.util.Map.class);
            
            String accountId = (String) jsonMap.get("accountId");
            String categoryId = (String) jsonMap.get("categoryId");
            Object amountObj = jsonMap.get("amount");
            String note = (String) jsonMap.get("note");
            String transactionDateStr = (String) jsonMap.get("transactionDate");
            String traceCode = (String) jsonMap.get("traceCode");
            
            System.out.println("üìù Parsed data: accountId=" + accountId + ", categoryId=" + categoryId + 
                             ", amount=" + amountObj + ", note=" + note);
            
            // Create transaction
            Transaction transaction = new Transaction();
            
            // Set amount
            if (amountObj instanceof Number) {
                transaction.setAmount(new BigDecimal(((Number) amountObj).doubleValue()));
            } else {
                transaction.setAmount(new BigDecimal(amountObj.toString()));
            }
            
            // Set type based on amount
            transaction.setType(transaction.getAmount().compareTo(BigDecimal.ZERO) >= 0 ? "income" : "expense");
            
            // Set note
            transaction.setNote(note);
            
            // Set transaction date - parse from string or use now
            if (transactionDateStr != null && !transactionDateStr.isEmpty()) {
                try {
                    // Parse ISO datetime string: "2025-10-12T10:14:00"
                    transaction.setTransactionDate(LocalDateTime.parse(transactionDateStr));
                } catch (Exception e) {
                    System.err.println("‚ö†Ô∏è Cannot parse date: " + transactionDateStr + ", using now()");
                    transaction.setTransactionDate(LocalDateTime.now());
                }
            } else {
                transaction.setTransactionDate(LocalDateTime.now());
            }
            
            // Load and set account
            if (accountId != null && !accountId.isEmpty()) {
                Account account = accountService.getAccountById(UUID.fromString(accountId));
                if (account != null) {
                    transaction.setAccount(account);
                    System.out.println("‚úÖ Account loaded: " + account.getName());
                } else {
                    throw new IllegalArgumentException("Account not found: " + accountId);
                }
            }
            
            // Load and set category
            if (categoryId != null && !categoryId.isEmpty()) {
                Category category = categoryService.getCategoryById(UUID.fromString(categoryId));
                if (category != null) {
                    transaction.setCategory(category);
                    System.out.println("‚úÖ Category loaded: " + category.getName());
                } else {
                    throw new IllegalArgumentException("Category not found: " + categoryId);
                }
            }
            
            // Save to database
            System.out.println("üíæ Saving transaction to database...");
            transactionService.addTransaction(transaction);
            System.out.println("‚úÖ Transaction saved successfully with ID: " + transaction.getId());
            
            // Return success response
            String jsonResponse = "{\"success\":true,\"message\":\"Giao d·ªãch ƒë√£ ƒë∆∞·ª£c l∆∞u th√†nh c√¥ng\",\"id\":\"" + 
                                transaction.getId() + "\"}";
            response.getWriter().write(jsonResponse);
            
        } catch (Exception e) {
            System.err.println("‚ùå Error saving transaction: " + e.getClass().getName() + " - " + e.getMessage());
            e.printStackTrace();
            
            response.setStatus(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);
            response.getWriter().write("{\"success\":false,\"error\":\"" + escapeJson(e.getMessage()) + "\"}");
        }
    }

    /**
     * T·∫£i d·ªØ li·ªáu c·∫ßn thi·∫øt cho c√°c form tr√™n trang (danh s√°ch t√†i kho·∫£n, danh m·ª•c).
     */
    private void loadFormData(HttpServletRequest request) {
        // Gi·∫£ s·ª≠ userId ƒë∆∞·ª£c l·∫•y t·ª´ session
        // UUID userId = (UUID) request.getSession().getAttribute("user_id");
        List<Account> accounts = accountService.getAllAccounts();
        List<Category> categories = categoryService.getAllCategories(); // Ho·∫∑c getCategoriesByUser(userId);
        
        request.setAttribute("accounts", accounts);
        request.setAttribute("categories", categories);
    }
}