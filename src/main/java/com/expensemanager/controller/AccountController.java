package com.expensemanager.controller;

import java.io.IOException;
import java.math.BigDecimal;
import java.util.List;
import java.util.Map;
import java.util.UUID;

import com.expensemanager.model.Account;
import com.expensemanager.model.User;
import com.expensemanager.service.AccountService;
import com.google.gson.Gson;

import jakarta.servlet.ServletException;
import jakarta.servlet.annotation.WebServlet;
import jakarta.servlet.http.HttpServlet;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;

/**
 * AccountController - Qu·∫£n l√Ω c√°c t√†i kho·∫£n ng√¢n h√†ng (V√≠, Th·∫ª t√≠n d·ª•ng, v.v.).
 * Controller n√†y tu√¢n theo m√¥ h√¨nh MVC, x·ª≠ l√Ω logic v√† chuy·ªÉn ti·∫øp ƒë·∫øn view (JSP).
 */
@WebServlet(urlPatterns = {"/accounts", "/api/accounts", "/api/accounts/*", "/api/bank-history/accounts"})
public class AccountController extends HttpServlet {

    // üîπ S·ª≠ d·ª•ng Service Layer ƒë·ªÉ t√°ch bi·ªát logic nghi·ªáp v·ª• kh·ªèi controller
    private final AccountService accountService = new AccountService();

    /**
     * X·ª≠ l√Ω y√™u c·∫ßu GET: Hi·ªÉn th·ªã danh s√°ch t√†i kho·∫£n v√† form ƒë·ªÉ s·ª≠a/th√™m m·ªõi.
     */
    @Override
    protected void doGet(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {

        // Check if this is an API call (expects JSON response)
        String pathInfo = request.getPathInfo();
        String acceptHeader = request.getHeader("Accept");
        boolean isApiCall = (acceptHeader != null && acceptHeader.contains("application/json")) ||
                (pathInfo != null && !pathInfo.isEmpty());

        if (isApiCall) {
            // Handle API call - return JSON
            handleApiRequest(request, response);
            return;
        }

        // Gi·∫£ s·ª≠ c√≥ session check t∆∞∆°ng t·ª± c√°c controller kh√°c
        // ...

        try {
            // üîπ Ki·ªÉm tra tham s·ªë 'action' t·ª´ URL ƒë·ªÉ x·ª≠ l√Ω S·ª≠a ho·∫∑c X√≥a
            String action = request.getParameter("action");

            if ("delete".equals(action)) {
                // H√†nh ƒë·ªông X√ìA
                UUID accountId = UUID.fromString(request.getParameter("id"));
                accountService.deleteAccount(accountId);
                // Chuy·ªÉn h∆∞·ªõng v·ªÅ trang danh s√°ch ƒë·ªÉ l√†m m·ªõi d·ªØ li·ªáu
                response.sendRedirect(request.getContextPath() + "/accounts");
                return; // K·∫øt th√∫c x·ª≠ l√Ω

            } else if ("edit".equals(action)) {
                // H√†nh ƒë·ªông S·ª¨A: T·∫£i th√¥ng tin t√†i kho·∫£n c·∫ßn s·ª≠a v√†o form
                UUID accountId = UUID.fromString(request.getParameter("id"));
                Account editAccount = accountService.getAccountById(accountId);
                // ƒê·∫∑t v√†o request ƒë·ªÉ JSP c√≥ th·ªÉ ƒëi·ªÅn v√†o form
                request.setAttribute("editAccount", editAccount);
            }

        } catch (Exception e) {
            System.err.println("L·ªói trong AccountController doGet: " + e.getMessage());
            request.setAttribute("error", "ƒê√£ x·∫£y ra l·ªói khi x·ª≠ l√Ω y√™u c·∫ßu c·ªßa b·∫°n.");
        }

        // ‚úÖ T·∫£i danh s√°ch t·∫•t c·∫£ t√†i kho·∫£n ƒë·ªÉ hi·ªÉn th·ªã
        loadAllAccounts(request);

        // ‚úÖ Chuy·ªÉn ti·∫øp ƒë·∫øn view ƒë·ªÉ hi·ªÉn th·ªã trang
        request.setAttribute("view", "/views/account-transactions.jsp");
        request.getRequestDispatcher("/layout/layout.jsp").forward(request, response);
    }

    /**
     * Handle API requests that expect JSON response
     */
    private void handleApiRequest(HttpServletRequest request, HttpServletResponse response)
            throws IOException {
        response.setContentType("application/json");
        response.setCharacterEncoding("UTF-8");

        try {
            System.out.println("üîç AccountController API Request");

            // Check if this is a stats request
            String pathInfo = request.getPathInfo();
            System.out.println("üìç Path info: " + pathInfo);

            if (pathInfo != null && pathInfo.contains("stats")) {
                // Handle stats endpoint for accounts-management page
                handleStatsRequest(request, response);
                return;
            }

            // Get all accounts
            List<Account> accounts = accountService.getAllAccounts();

            System.out.println("‚úÖ Found " + accounts.size() + " accounts");

            // Build JSON response
            StringBuilder json = new StringBuilder();
            json.append("{\"success\":true,\"data\":[");

            for (int i = 0; i < accounts.size(); i++) {
                Account acc = accounts.get(i);
                if (i > 0) json.append(",");

                json.append("{")
                        .append("\"id\":\"").append(acc.getId()).append("\",")
                        .append("\"name\":\"").append(escapeJson(acc.getName())).append("\",")
                        .append("\"balance\":").append(acc.getBalance()).append(",")
                        .append("\"currency\":\"").append(escapeJson(acc.getCurrency())).append("\"")
                        .append("}");
            }

            json.append("]}");

            response.getWriter().write(json.toString());
            System.out.println("‚úÖ JSON response sent successfully");

        } catch (Exception e) {
            System.err.println("‚ùå Error in AccountController API: " + e.getMessage());
            e.printStackTrace();
            response.setStatus(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);
            response.getWriter().write("{\"success\":false,\"error\":\"" + escapeJson(e.getMessage()) + "\"}");
        }
    }

    /**
     * Handle stats request for accounts-management page
     */
    private void handleStatsRequest(HttpServletRequest request, HttpServletResponse response)
            throws IOException {
        try {
            System.out.println("üìä Handling stats request");

            // Get all accounts with full details
            List<Account> accounts = accountService.getAllAccounts();

            // Build JSON array (not wrapped in success/data)
            StringBuilder json = new StringBuilder();
            json.append("[");

            for (int i = 0; i < accounts.size(); i++) {
                Account acc = accounts.get(i);
                if (i > 0) json.append(",");

                json.append("{")
                        .append("\"id\":\"").append(acc.getId()).append("\",")
                        .append("\"name\":\"").append(escapeJson(acc.getName())).append("\",")
                        .append("\"balance\":").append(acc.getBalance()).append(",")
                        .append("\"currency\":\"").append(escapeJson(acc.getCurrency())).append("\"")
                        .append("}");
            }

            json.append("]");

            response.getWriter().write(json.toString());
            System.out.println("‚úÖ Stats response sent: " + accounts.size() + " accounts");

        } catch (Exception e) {
            System.err.println("‚ùå Error in stats request: " + e.getMessage());
            e.printStackTrace();
            response.setStatus(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);
            response.getWriter().write("[]");
        }
    }

    /**
     * Escape special characters for JSON
     */
    private String escapeJson(String str) {
        if (str == null) return "";
        return str.replace("\\", "\\\\")
                .replace("\"", "\\\"")
                .replace("\n", "\\n")
                .replace("\r", "\\r")
                .replace("\t", "\\t");
    }

    /**
     * X·ª≠ l√Ω y√™u c·∫ßu POST: Th√™m m·ªõi ho·∫∑c c·∫≠p nh·∫≠t m·ªôt t√†i kho·∫£n.
     */
    @Override
    protected void doPost(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {

        // Check if this is an API call (expects JSON response)
        String contentType = request.getContentType();
        String acceptHeader = request.getHeader("Accept");
        boolean isApiCall = (contentType != null && contentType.contains("application/json")) ||
                (acceptHeader != null && acceptHeader.contains("application/json"));

        if (isApiCall) {
            handleApiPost(request, response);
            return;
        }

        // Handle form submission (existing code)
        try {
            // üîπ L·∫•y d·ªØ li·ªáu t·ª´ form HTML
            String idParam = request.getParameter("id");
            String name = request.getParameter("name");
            String balanceStr = request.getParameter("balance");
            String currency = request.getParameter("currency");

            // ‚úÖ T·∫°o ƒë·ªëi t∆∞·ª£ng Account t·ª´ d·ªØ li·ªáu form
            Account account = new Account();
            account.setName(name);
            account.setCurrency(currency);
            // TODO: L·∫•y User t·ª´ session v√† set v√†o account
            // User user = userService.findById(userId);
            // account.setUser(user);

            if (balanceStr != null && !balanceStr.isEmpty()) {
                account.setBalance(new BigDecimal(balanceStr));
            } else {
                account.setBalance(BigDecimal.ZERO);
            }

            // üîπ Ph√¢n bi·ªát gi·ªØa Th√™m m·ªõi v√† C·∫≠p nh·∫≠t d·ª±a v√†o 'id'
            if (idParam == null || idParam.isEmpty()) {
                // TH√äM M·ªöI: id kh√¥ng t·ªìn t·∫°i
                accountService.addAccount(account);
            } else {
                // C·∫¨P NH·∫¨T: id ƒë√£ c√≥
                account.setId(UUID.fromString(idParam));
                accountService.updateAccount(account);
            }

        } catch (Exception e) {
            System.err.println("L·ªói trong AccountController doPost: " + e.getMessage());
            request.setAttribute("error", "Kh√¥ng th·ªÉ l∆∞u t√†i kho·∫£n. Vui l√≤ng ki·ªÉm tra l·∫°i d·ªØ li·ªáu.");

            // N·∫øu c√≥ l·ªói, t·∫£i l·∫°i d·ªØ li·ªáu v√† hi·ªÉn th·ªã l·∫°i form v·ªõi th√¥ng b√°o l·ªói
            loadAllAccounts(request);
            request.setAttribute("view", "/views/accounts.jsp");
            request.getRequestDispatcher("/layout/layout.jsp").forward(request, response);
            return;
        }

        // ‚úÖ Chuy·ªÉn h∆∞·ªõng v·ªÅ trang danh s√°ch sau khi l∆∞u th√†nh c√¥ng (Post-Redirect-Get)
        response.sendRedirect(request.getContextPath() + "/accounts");
    }

    /**
     * Handle API POST request (JSON)
     */
    private void handleApiPost(HttpServletRequest request, HttpServletResponse response)
            throws IOException {
        response.setContentType("application/json");
        response.setCharacterEncoding("UTF-8");

        try {
            // Read JSON from request body
            StringBuilder sb = new StringBuilder();
            String line;
            while ((line = request.getReader().readLine()) != null) {
                sb.append(line);
            }
            String jsonString = sb.toString();

            System.out.println("üì• Received JSON: " + jsonString);

            // Parse JSON using Gson
            Gson gson = new Gson();
            @SuppressWarnings("unchecked")
            Map<String, Object> jsonMap = gson.fromJson(jsonString, Map.class);

            String name = (String) jsonMap.get("name");
            Object balanceObj = jsonMap.get("balance");
            String currency = (String) jsonMap.get("currency");

            System.out.println("üìù Parsed: name=" + name + ", balance=" + balanceObj + ", currency=" + currency);

            // Create new account
            Account account = new Account();
            account.setName(name);
            account.setCurrency(currency != null && !currency.isEmpty() ? currency : "VND");

            // Handle balance (can be Number or String)
            if (balanceObj != null) {
                if (balanceObj instanceof Number) {
                    account.setBalance(new BigDecimal(((Number) balanceObj).doubleValue()));
                } else {
                    account.setBalance(new BigDecimal(balanceObj.toString()));
                }
            } else {
                account.setBalance(BigDecimal.ZERO);
            }

            // Set user (hardcoded for testing - TODO: get from session)
            User user = new User();
            user.setId(UUID.fromString("67b78d51-4eec-491c-bbf0-30e982def9e0")); // testuser from database
            account.setUser(user);

            System.out.println("üíæ Attempting to save account: " + account.getName());
            System.out.println("üë§ User ID: " + user.getId());

            // Save account
            try {
                accountService.addAccount(account);
                System.out.println("‚úÖ Account saved to database successfully");
            } catch (Exception saveEx) {
                System.err.println("‚ùå Failed to save account: " + saveEx.getClass().getName() + " - " + saveEx.getMessage());
                saveEx.printStackTrace();
                throw saveEx; // Re-throw to outer catch
            }

            // Return success response
            String jsonResponse = "{\"success\":true,\"message\":\"T√†i kho·∫£n ƒë√£ ƒë∆∞·ª£c th√™m th√†nh c√¥ng\",\"id\":\"" + account.getId() + "\"}";
            response.getWriter().write(jsonResponse);
            System.out.println("‚úÖ Account created successfully with ID: " + account.getId());

        } catch (Exception e) {
            System.err.println("‚ùå Error in API POST: " + e.getClass().getName() + " - " + e.getMessage());
            e.printStackTrace();

            // Print full stack trace
            System.err.println("=== Full Stack Trace ===");
            for (StackTraceElement ste : e.getStackTrace()) {
                System.err.println("  at " + ste.toString());
            }

            // Build detailed error message for debugging
            StringBuilder errorDetails = new StringBuilder();
            errorDetails.append(e.getClass().getSimpleName()).append(": ").append(e.getMessage());

            // Add cause if exists
            if (e.getCause() != null) {
                errorDetails.append(" | Cause: ").append(e.getCause().getClass().getSimpleName())
                        .append(" - ").append(e.getCause().getMessage());
            }

            response.setStatus(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);
            response.getWriter().write("{\"success\":false,\"error\":\"" + escapeJson(errorDetails.toString()) + "\"}");
        }
    }

    @Override
    protected void doPut(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        // PUT requests are handled as POST for now
        handleApiPost(request, response);
    }

    @Override
    protected void doDelete(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        response.setContentType("application/json");
        response.setCharacterEncoding("UTF-8");

        try {
            String pathInfo = request.getPathInfo();
            if (pathInfo == null || pathInfo.length() <= 1) {
                response.setStatus(HttpServletResponse.SC_BAD_REQUEST);
                response.getWriter().write("{\"success\":false,\"error\":\"Account ID is required\"}");
                return;
            }

            String accountId = pathInfo.substring(1); // Remove leading "/"
            System.out.println("üóëÔ∏è Deleting account: " + accountId);

            accountService.deleteAccount(UUID.fromString(accountId));

            response.getWriter().write("{\"success\":true,\"message\":\"T√†i kho·∫£n ƒë√£ ƒë∆∞·ª£c x√≥a th√†nh c√¥ng\"}");
            System.out.println("‚úÖ Account deleted successfully");

        } catch (Exception e) {
            System.err.println("‚ùå Error in DELETE: " + e.getMessage());
            e.printStackTrace();
            response.setStatus(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);
            response.getWriter().write("{\"success\":false,\"error\":\"" + escapeJson(e.getMessage()) + "\"}");
        }
    }

    /**
     * Ph∆∞∆°ng th·ª©c tr·ª£ gi√∫p ƒë·ªÉ t·∫£i danh s√°ch t√†i kho·∫£n v√† ƒë·∫∑t v√†o request.
     */
    private void loadAllAccounts(HttpServletRequest request) {
        List<Account> accounts = accountService.getAllAccounts();
        request.setAttribute("accounts", accounts);
    }
}