package com.expensemanager.controller;

import java.io.IOException;
import java.math.BigDecimal;
import java.util.List;
import java.util.UUID;

import com.expensemanager.model.Account;
import com.expensemanager.model.Transaction;
import com.expensemanager.service.AccountService;
import com.expensemanager.service.TransactionService;

import jakarta.servlet.ServletException;
import jakarta.servlet.annotation.WebServlet;
import jakarta.servlet.http.HttpServlet;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;

// üîπ URL mapping ƒë·ªÉ ph√π h·ª£p v·ªõi frontend API calls: /api/bank-history/*
@WebServlet("/api/bank-history/*")
public class BankHistoryController extends HttpServlet {

    // üîπ Kh·ªüi t·∫°o c√°c Service c·∫ßn thi·∫øt, thay v√¨ d√πng EntityManager tr·ª±c ti·∫øp
    private final TransactionService transactionService = new TransactionService();
    private final AccountService accountService = new AccountService();

    /**
     * X·ª≠ l√Ω y√™u c·∫ßu GET: Hi·ªÉn th·ªã danh s√°ch giao d·ªãch v√† form th√™m m·ªõi.
     */
    @Override
    protected void doGet(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {

        // Check if this is an API call (expects JSON response)
        String pathInfo = request.getPathInfo();
        String acceptHeader = request.getHeader("Accept");
        boolean isApiCall = (acceptHeader != null && acceptHeader.contains("application/json")) ||
                           (pathInfo != null && !pathInfo.isEmpty());
        
        if (isApiCall) {
            // Handle API call - return JSON
            handleApiRequest(request, response);
            return;
        }

        // üîπ X·ª≠ l√Ω c√°c h√†nh ƒë·ªông nh∆∞ X√ìA giao d·ªãch
        String action = request.getParameter("action");
        if ("delete".equals(action)) {
            try {
                UUID transactionId = UUID.fromString(request.getParameter("id"));
                transactionService.deleteTransaction(transactionId);
                // Sau khi x√≥a, redirect v·ªÅ trang danh s√°ch ƒë·ªÉ t·∫£i l·∫°i d·ªØ li·ªáu m·ªõi
                response.sendRedirect(request.getContextPath() + "/api/bank-history");
                return; // K·∫øt th√∫c x·ª≠ l√Ω t·∫°i ƒë√¢y
            } catch (Exception e) {
                // X·ª≠ l√Ω l·ªói n·∫øu ID kh√¥ng h·ª£p l·ªá ho·∫∑c x√≥a th·∫•t b·∫°i
                System.err.println("L·ªói khi x√≥a giao d·ªãch: " + e.getMessage());
                request.setAttribute("error", "Kh√¥ng th·ªÉ x√≥a giao d·ªãch n√†y.");
            }
        }
        
        // ‚úÖ T·∫£i d·ªØ li·ªáu c·∫ßn thi·∫øt cho trang JSP
        loadTransactionData(request);

        // ‚úÖ Chuy·ªÉn ti·∫øp t·ªõi view ƒë·ªÉ hi·ªÉn th·ªã
        request.setAttribute("view", "/views/transactions.jsp");
        request.getRequestDispatcher("/layout/layout.jsp").forward(request, response);
    }
    
    /**
     * Handle API requests that expect JSON response
     */
    private void handleApiRequest(HttpServletRequest request, HttpServletResponse response)
            throws IOException {
        response.setContentType("application/json");
        response.setCharacterEncoding("UTF-8");
        
        try {
            String accountIdFilter = request.getParameter("accountId");
            
            System.out.println("üîç API Request - Loading transactions...");
            System.out.println("üìå Account Filter: " + accountIdFilter);
            
            // Get transactions from service
            List<Transaction> transactions = transactionService.getFilteredTransactions(accountIdFilter);
            
            System.out.println("‚úÖ Found " + transactions.size() + " transactions");
            
            // Build JSON response manually
            StringBuilder json = new StringBuilder();
            json.append("{\"success\":true,\"data\":[");
            
            for (int i = 0; i < transactions.size(); i++) {
                Transaction tx = transactions.get(i);
                if (i > 0) json.append(",");
                
                json.append("{")
                    .append("\"id\":\"").append(tx.getId()).append("\",")
                    .append("\"type\":\"").append(escapeJson(tx.getType())).append("\",")
                    .append("\"amount\":").append(tx.getAmount()).append(",")
                    .append("\"note\":\"").append(escapeJson(tx.getNote())).append("\",")
                    .append("\"transactionDate\":\"").append(tx.getTransactionDate()).append("\",")
                    .append("\"categoryName\":\"").append(tx.getCategory() != null ? escapeJson(tx.getCategory().getName()) : "").append("\",")
                    .append("\"accountName\":\"").append(tx.getAccount() != null ? escapeJson(tx.getAccount().getName()) : "").append("\"")
                    .append("}");
            }
            
            json.append("]}");
            
            response.getWriter().write(json.toString());
            System.out.println("‚úÖ JSON response sent successfully");
            
        } catch (Exception e) {
            System.err.println("‚ùå Error in API request: " + e.getMessage());
            e.printStackTrace();
            response.setStatus(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);
            response.getWriter().write("{\"success\":false,\"error\":\"" + escapeJson(e.getMessage()) + "\"}");
        }
    }
    
    /**
     * Escape special characters for JSON
     */
    private String escapeJson(String str) {
        if (str == null) return "";
        return str.replace("\\", "\\\\")
                  .replace("\"", "\\\"")
                  .replace("\n", "\\n")
                  .replace("\r", "\\r")
                  .replace("\t", "\\t");
    }

    /**
     * X·ª≠ l√Ω y√™u c·∫ßu POST: Th√™m m·ªõi m·ªôt giao d·ªãch.
     */
    @Override
    protected void doPost(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        
        // Gi·∫£ s·ª≠ c√≥ session check
        // HttpSession session = request.getSession(false);
        
        try {
            // üîπ L·∫•y d·ªØ li·ªáu t·ª´ form thay v√¨ ƒë·ªçc JSON
            String accountIdStr = request.getParameter("accountId");
            String categoryIdStr = request.getParameter("categoryId");
            String note = request.getParameter("note");
            String amountStr = request.getParameter("amount");
            String type = request.getParameter("type"); // "income" ho·∫∑c "expense"

            // ‚úÖ T·∫°o ƒë·ªëi t∆∞·ª£ng Transaction t·ª´ d·ªØ li·ªáu form
            Transaction newTransaction = new Transaction();
            newTransaction.setNote(note);
            newTransaction.setType(type);
            
            if (amountStr != null && !amountStr.isEmpty()) {
                newTransaction.setAmount(new BigDecimal(amountStr));
            }
            
            // L·∫•y Account v√† Category objects
            if (accountIdStr != null && !accountIdStr.isEmpty()) {
                Account account = accountService.getAccountById(UUID.fromString(accountIdStr));
                newTransaction.setAccount(account);
            }
            if (categoryIdStr != null && !categoryIdStr.isEmpty()) {
                // TODO: Get Category from CategoryService
                // Category category = categoryService.getCategoryById(UUID.fromString(categoryIdStr));
                // newTransaction.setCategory(category);
            }
            
            // ‚úÖ G·ªçi service ƒë·ªÉ l∆∞u giao d·ªãch
            transactionService.addTransaction(newTransaction);
            
        } catch (NumberFormatException e) {
            System.err.println("L·ªói ƒë·ªãnh d·∫°ng s·ªë: " + e.getMessage());
            request.setAttribute("error", "S·ªë ti·ªÅn kh√¥ng h·ª£p l·ªá.");
            // T·∫£i l·∫°i d·ªØ li·ªáu v√† hi·ªÉn th·ªã l·∫°i form v·ªõi l·ªói
            loadTransactionData(request);
            request.setAttribute("view", "/views/transactions.jsp");
            request.getRequestDispatcher("/layout/layout.jsp").forward(request, response);
            return;
        } catch (Exception e) {
            System.err.println("L·ªói khi th√™m giao d·ªãch: " + e.getMessage());
            request.setAttribute("error", "ƒê√£ x·∫£y ra l·ªói khi th√™m giao d·ªãch.");
            // T·∫£i l·∫°i d·ªØ li·ªáu v√† hi·ªÉn th·ªã l·∫°i form v·ªõi l·ªói
            loadTransactionData(request);
            request.setAttribute("view", "/views/transactions.jsp");
            request.getRequestDispatcher("/layout/layout.jsp").forward(request, response);
            return;
        }

        // ‚úÖ Sau khi th√™m th√†nh c√¥ng, redirect v·ªÅ trang danh s√°ch (Post-Redirect-Get Pattern)
        response.sendRedirect(request.getContextPath() + "/transactions");
    }
    
    /**
     * Ph∆∞∆°ng th·ª©c tr·ª£ gi√∫p ƒë·ªÉ t·∫£i d·ªØ li·ªáu v√† ƒë·∫∑t v√†o request.
     * Tr√°nh l·∫∑p code trong c·∫£ doGet v√† doPost khi c·∫ßn hi·ªÉn th·ªã l·∫°i trang.
     */
    private void loadTransactionData(HttpServletRequest request) {
        // L·∫•y c√°c tham s·ªë l·ªçc t·ª´ URL
        String accountIdFilter = request.getParameter("filterAccountId");
        
        // ‚úÖ L·∫•y danh s√°ch giao d·ªãch t·ª´ service (c√≥ th·ªÉ c√≥ b·ªô l·ªçc)
        List<Transaction> transactions = transactionService.getFilteredTransactions(accountIdFilter);
        
        // ‚úÖ L·∫•y danh s√°ch t√†i kho·∫£n ƒë·ªÉ hi·ªÉn th·ªã trong dropdown b·ªô l·ªçc/form
        List<Account> accounts = accountService.getAllAccounts();
        
        // ‚úÖ ƒê·∫∑t d·ªØ li·ªáu v√†o request ƒë·ªÉ JSP c√≥ th·ªÉ truy c·∫≠p
        request.setAttribute("transactions", transactions);
        request.setAttribute("accounts", accounts);
        
        // (T∆∞∆°ng t·ª±, b·∫°n c√≥ th·ªÉ t·∫£i danh s√°ch categories ·ªü ƒë√¢y)
        // List<Category> categories = categoryService.getCategoriesByUser(...);
        // request.setAttribute("categories", categories);
    }
}