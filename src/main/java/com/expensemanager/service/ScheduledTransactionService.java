package com.expensemanager.service;

import com.expensemanager.dao.ScheduledTransactionDAO;
import com.expensemanager.dao.TransactionDAO;
import com.expensemanager.model.Account;
import com.expensemanager.model.Category;
import com.expensemanager.model.ScheduledTransaction;
import org.quartz.CronExpression;

import java.sql.Timestamp;
import java.time.LocalDateTime;
import java.util.Date;
import java.util.List;
import java.util.UUID;

public class ScheduledTransactionService {
    private ScheduledTransactionDAO dao;
    private TransactionDAO transactionDAO = new TransactionDAO();

    public ScheduledTransactionService() {
        this.dao = new ScheduledTransactionDAO();
    }

    public ScheduledTransactionService(ScheduledTransactionDAO dao) {
        this.dao = dao;
    }

    public List<ScheduledTransaction> listTransactions(String categoryNameFilter, String account, String from, String to, String note, String[] types, UUID userId) {
        return dao.getFiltered(categoryNameFilter, account, from, to, note, types, userId);
    }

    public void createTransaction(ScheduledTransaction t) {
        dao.add(t);
    }

    public void removeTransaction(UUID id, UUID userId) {
        dao.delete(id, userId);
    }


    public void runNow(UUID id, UUID userId) {
        ScheduledTransaction st = dao.getById(id, userId);
        if (st != null && st.isActive()) {
            processSingle(st, userId);
            dao.update(st);
        }
    }

    public void processAllScheduled() {
        // Gi·ªØ nguy√™n x·ª≠ l√Ω due (ƒë√£ qu√° h·∫°n ho·∫∑c ƒë√∫ng h·∫°n)
        List<ScheduledTransaction> due = dao.getDueTransactions();
        for (ScheduledTransaction st : due) {
            UUID userId = getUserIdFromAccount(st);
            if (st.isActive() && userId != null) {
                processSingle(st, userId);
                dao.update(st);
            }
        }

        // TH√äM: X·ª≠ l√Ω upcoming (s·∫Øp due trong 1 ng√†y t·ªõi)
        List<ScheduledTransaction> upcoming = dao.getUpcomingTransactions(1); // 1 ng√†y t·ªõi
        for (ScheduledTransaction st : upcoming) {
            UUID userId = getUserIdFromAccount(st);
            if (st.isActive() && userId != null) {
                processUpcoming(st, userId);// Method m·ªõi cho upcoming
                dao.update(st); // m·ªõi th√™m
                // Kh√¥ng update next_run ·ªü ƒë√¢y, v√¨ ch∆∞a due
            }
        }
    }

    private void processSingle(ScheduledTransaction st, UUID userId) {
        System.out.println("‚ñ∂ ƒêang x·ª≠ l√Ω schedule " + st.getId()
                + " | Category=" + st.getCategoryId()
                + " | Amount=" + st.getAmount()
                + " | Type=" + st.getType()
                + " | NextRun=" + st.getNextRun());

        // THAY ƒê·ªîI: S·ª≠ d·ª•ng hasTransactionNearDue thay v√¨ hasTransactionInMonth, ƒë·ªÉ ki·ªÉm tra tr∆∞·ªõc h·∫°n (7 ng√†y)
        boolean paid = transactionDAO.hasTransactionNearDue(
                st.getCategoryId(),
                st.getAmount(),  // Gi·∫£ s·ª≠ getAmount() tr·∫£ BigDecimal
                st.getType(),
                st.getNextRun(),
                7,  // Ki·ªÉm tra tr∆∞·ªõc 7 ng√†y (c√≥ th·ªÉ thay th√†nh 1 n·∫øu ch·ªâ mu·ªën ƒë√∫ng ng√†y)
                userId
        );

        if (paid) {
            updateNextRun(st);
            System.out.println("‚úÖ Giao d·ªãch ƒë·ªãnh k·ª≥ ƒë√£ ƒë∆∞·ª£c thanh to√°n (c√≥ th·ªÉ tr∆∞·ªõc h·∫°n), c·∫≠p nh·∫≠t nextRun ‚Üí " + st.getNextRun());
        } else {
            // N·∫øu g·∫ßn ƒë·∫øn h·∫°n th√¨ g·ª≠i nh·∫Øc nh·ªü
            LocalDateTime now = LocalDateTime.now();
            LocalDateTime dueDate = st.getNextRun().toLocalDateTime();
            if (now.isAfter(dueDate.minusDays(3))) {
                sendReminderIfNeeded(st, userId);
            }
            System.out.println("‚è≥ Ch∆∞a c√≥ giao d·ªãch t∆∞∆°ng ·ª©ng cho " + st.getId());
        }
    }

    private void processUpcoming(ScheduledTransaction st, UUID userId) {
        System.out.println("‚ñ∂ ƒêang ki·ªÉm tra upcoming schedule " + st.getId() + " | NextRun=" + st.getNextRun());

        // THAY ƒê·ªîI: S·ª≠ d·ª•ng hasTransactionNearDue thay v√¨ hasTransactionInMonth
        boolean paid = transactionDAO.hasTransactionNearDue(
                st.getCategoryId(),
                st.getAmount(),  // BigDecimal
                st.getType(),
                st.getNextRun(),
                7,
                userId
        );

        if (paid) {
            updateNextRun(st);
            System.out.println("‚úÖ ƒê√£ paid (c√≥ th·ªÉ tr∆∞·ªõc h·∫°n), c·∫≠p nh·∫≠t nextRun ‚Üí " + st.getNextRun());
        } else {
            // Ki·ªÉm tra n·∫øu ƒë√∫ng th·ªùi ƒëi·ªÉm g·ª≠i tr∆∞·ªõc 1 ng√†y
            LocalDateTime now = LocalDateTime.now();
            LocalDateTime dueDate = st.getNextRun().toLocalDateTime();
            LocalDateTime reminderTime = dueDate.minusDays(1); // Tr∆∞·ªõc 1 ng√†y
            if (now.isAfter(reminderTime) && now.isBefore(dueDate)) {
                sendReminderIfNeeded(st, userId);
                System.out.println("üìß ƒê√£ g·ª≠i nh·∫Øc nh·ªü tr∆∞·ªõc cho " + st.getId());
            } else {
                System.out.println("‚è≥ Ch∆∞a ƒë·∫øn l√∫c g·ª≠i nh·∫Øc nh·ªü cho " + st.getId());
            }
        }
    }

    private void sendReminderIfNeeded(ScheduledTransaction st, UUID userId) {
        String email = transactionDAO.getUserEmailByAccount(st.getAccountId());
        String subject = "Nh·∫Øc nh·ªü thanh to√°n: " + st.getCategoryName();
        String body = "Vui l√≤ng thanh to√°n " + st.getAmount() + " VND " +
                " tr∆∞·ªõc h·∫°n " + st.getNextRun().toLocalDateTime().toLocalDate() +
                ". (Giao d·ªãch ƒë·ªãnh k·ª≥ ID: " + st.getId() + ")";
        EmailService.sendReminder(email, subject, body);
    }

    private UUID getUserIdFromAccount(ScheduledTransaction st) {
        return st.getAccount() != null ? st.getAccount().getUserId() :
                UUID.fromString("4efcb554-f4c5-442a-b57c-89d213861501"); // Fallback hardcoded
    }
    // =================== B·ªé QUA GIAO D·ªäCH ===================
    public void skipTransaction(UUID id, UUID userId) {
        ScheduledTransaction st = dao.getById(id, userId);
        if (st == null || !st.isActive()) return;

        try {
            updateNextRun(st);
            dao.update(st);
            System.out.println("‚è≠Ô∏è ƒê√£ b·ªè qua: c·∫≠p nh·∫≠t next_run m·ªõi = " + st.getNextRun());
        } catch (Exception e) {
            e.printStackTrace();
            // fallback an to√†n: +7 ng√†y
            LocalDateTime next = st.getNextRun().toLocalDateTime().plusDays(1);
            st.setNextRun(Timestamp.valueOf(next));
            dao.update(st);
        }
    }

    // =================== C·∫¨P NH·∫¨T NEXT_RUN ===================
    private void updateNextRun(ScheduledTransaction st) {
        try {
            String cronExpr = st.getScheduleCron();

            // ‚úÖ 1Ô∏è‚É£ N·∫øu cron h·ª£p l·ªá (Quartz) ‚Üí d√πng chu·∫©n
            if (cronExpr != null && CronExpression.isValidExpression(cronExpr)) {
                CronExpression cron = new CronExpression(cronExpr);
                Date current = new Date(st.getNextRun().getTime());
                Date next = cron.getNextValidTimeAfter(current);
                if (next != null) {
                    st.setNextRun(new Timestamp(next.getTime()));
                    return;
                }
            }

            // ‚úÖ 2Ô∏è‚É£ N·∫øu Quartz kh√¥ng hi·ªÉu ‚Üí fallback logic ƒë∆°n gi·∫£n
            LocalDateTime current = st.getNextRun().toLocalDateTime();
            LocalDateTime nextTime = detectNextRun(cronExpr, current);
            st.setNextRun(Timestamp.valueOf(nextTime));

        } catch (Exception e) {
            e.printStackTrace();
            // ‚úÖ 3Ô∏è‚É£ fallback cu·ªëi c√πng: +7 ng√†y
            LocalDateTime next = st.getNextRun().toLocalDateTime().plusDays(1);
            st.setNextRun(Timestamp.valueOf(next));
        }
    }

    // =================== X√ÅC ƒê·ªäNH NEXT_RUN (FALLBACK) ===================
    private LocalDateTime detectNextRun(String cron, LocalDateTime current) {
        if (cron == null || cron.isEmpty()) {
            return current.plusDays(1); // default: m·ªói tu·∫ßn
        }

        cron = cron.trim();

        // üîπ H√†ng ng√†y ‚Üí +1 ng√†y
        if (cron.equals("0 0 * * * ?")) {
            return current.plusDays(1);
        }

        // üîπ H√†ng tu·∫ßn ‚Üí +7 ng√†y (kh√¥ng quan t√¢m th·ª©)
        if (cron.matches("0 0 \\* \\* [1-7]\\s?\\??") || cron.matches("0 0 \\* \\* \\? [1-7]")) {
            return current.plusWeeks(1);
        }

        // üîπ H√†ng th√°ng ‚Üí +1 th√°ng
        if (cron.matches("^0 0 (\\d{1,2}) \\* \\?$")) {
            return current.plusMonths(1);
        }

        // üîπ H√†ng nƒÉm ‚Üí +1 nƒÉm
        if (cron.matches("^0 0 (\\d{1,2}) (\\d{1,2}) \\?$")) {
            return current.plusYears(1);
        }

        // üîπ Tr∆∞·ªùng h·ª£p ch·ªçn 1 ng√†y c·ª• th·ªÉ ‚Üí +1 th√°ng
        if (cron.matches("^0 0 \\d{1,2} \\* \\?$")) {
            return current.plusMonths(1);
        }

        // üî∏ M·∫∑c ƒë·ªãnh: +1 ng√†y
        return current.plusDays(1);
    }

    public Account findAccountByName(String name, UUID userId) {
        return dao.findAccountByName(name, userId);
    }

    public Category findCategoryById(Integer id) {
        return dao.findCategoryById(id);
    }
}